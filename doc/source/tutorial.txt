.. currentmodule:: dana

========
Tutorial
========


Using dana
==========

The simplest way to use dana is to start a python shell and to import
dana:

.. code-block:: python

   >>> import dana
   >>> dana.__version__
   '0.1.0'

You can also import everything from dana, this will in fact import dana as well
as some other standard packages such as numpy (imported into namespace ``np``),
matplotlib and matplotlib.pyplot (imported into namespace ``plt``). You can
easily verify the presence of these underlying packages using:

.. code-block:: python

   >>> from dana import *
   >>> np.__version
   '1.4.1'
   >>> matplotlib.__version__
   '1.0.0'



Creating a unit
===============

A unit is an abstract a set of equations that can be either a
:class:`Declaration`, an :class:`Equation` or a
:class:`DifferentialEquation`. Before going further, let us first look at these
three types of equation.


Declaration
-----------

You can declare a unit to have a value of a given type using the a
:class:`Definition` of the form

   ``y : dtype``

where ``y`` is the name of the value and ``dtype`` is the associated numeric
type which can be one of ``bool``, ``int`` or ``float``.

.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('V')
   >>> unit.V
   Declaration('V : float')

This will declare unit to be a single value (`V`) of type float.

Of course you can have more than one value:

.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('V:bool; U:int, T:float')
   >>> print unit
   Declaration('V : bool')
   Declaration('U : int')
   Declaration('T : float')


Equation
--------

You can also declare a unit to have a value that is specified as an equation of
the form 

   ``y = expr : dtype``

where ``y`` is the name of the value, ``expr`` is a valid python expression and
``dtype`` is the associated numeric type which can be one of ``bool``, ``int``
or ``float``.


.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('V = 1 : int')
   >>> print unit
   Equation('V = 1 : int')

In this case, the unit possesses a unique value ``V`` that is equal to 1
(anytime) but you can also have more complex expressions as well as
inter-dependencies between values:

.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('V = 1;  U = 2*V')
   >>> print unit
   Equation('V = 1 : float')
   Equation('U = 2*V : float')

In this case, ``V`` is equal to 1 anytime (as previously) and ``U`` is equal to
``2*V`` = 2 anytime.

Now what happens if we have circular dependencies between values ? Let's check
out

.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('A=B; B=C; C=A')
   Traceback (most recent call last)
   File "<stdin>", line 1, in <module>
   File "/usr/lib/python2.6/site-packages/dana/unit.py", line 80, in __init__
     self._parse(definition)
   File "/usr/lib/python2.6/site-packages/dana/unit.py", line 123, in _parse
     'Unit possesses circular dependencies in equations'...
   dana.unit.UnitError: Unit possesses circular dependencies in equations

Since there are circular dependencies within the definition of the three
values, dana is unable to instantiate the Unit and you will have to find
another way of specifying your model of Unit.



Differential Equation
---------------------

A differential equation is mostly an equation that evolves through time and is
specified with an equation of the form

   ``dy/dt = expr : dtype``

where ``y`` is the name of the value, ``expr`` is a valid python expression and
``dtype`` is the associated numeric type which can be one of ``bool``, ``int``
or ``float``.

.. code-block:: python

   >>> from dana import *
   >>> unit = Unit('dV/dt = 1')
   >>> print unit
   DifferentialEquation('dV/dt = 1 : float')

Note that differential equations objects do not suffer from circular
dependencies since right hand side of a differential equation refers to time
*t* and computations are made for time *t+dt*.
 



Running a Unit
--------------


Creating a group
================

Group is an homogenous set of units whose values can evolve throught
time. Let's start with the most simple group we can create:

.. code-block:: python

   >>> from dana import *
   >>> Z = Group((5,5))



