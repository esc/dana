#! /bin/bash
# Fancy colors used to beautify the output a bit.
#

# Get some color code
if [ "$TERM" != "dumb" ]; then
    BLACK='\033[30m'
    BOLD='\033[1m'
    BLUE='\033[34m'
    RED='\033[31m'
    GREEN='\033[32m'
    NORMAL='\033[0m'
else
    BLACK=''
    BOLD=''
    BLUE=''
    RED=''
    GREEN=''
    NORMAL=''
fi

# Prefix
if [ -n "$DANA_ROOT" ]; then
    PREFIX=$DANA_ROOT
elif [ -n "$LOCAL" ]; then
    PREFIX=$LOCAL
else
    PREFIX="/usr"
fi

while [ "$#" -gt "0" ]
do
    OPTION=`echo $1 | cut -d'=' -f1`
    VALUE=`echo $1 | cut -d'=' -f2`

    if [ "$OPTION" = "--prefix" ]; then
        PREFIX=$VALUE
    fi
    shift
done



# Checks for Python interpreter. Honours $PYTHON if set. Stores path to
# interpreter in $PYTHON.
CheckPython()
{
    if [ -z "$PYTHON" ]; then
	PYTHON=`which python 2>/dev/null`
    fi
    echo -n "Checking for python: "
    if [ ! -x "$PYTHON" ]; then
	echo "not found!"
        TOOLS="missing"
    else
        version=`python -c "import sys; print sys.version[:3]"`
        echo "$PYTHON [$version]"
    fi
}



# Checks for scons. Honours $SCONS if set. Stores path to 'scons' in $SCONS.
# Requires that $PYTHON is set.
CheckSCons()
{
    echo -n "Checking for scons:  "
    if [ -z "$SCONS" ]; then
	SCONS=`which scons 2>/dev/null`
    fi
    if [ ! -x "$SCONS" ]; then
	echo "not found!"
        TOOLS="missing"
    else
        version=`scons -v | grep engine | cut -d' ' -f2 | cut -d'.' -f1-3 | cut -b2-`
        echo "$SCONS [$version]"
        SCONS="$SCONS -Q"
    fi
}

# Checks for g++. Honours $GPP if set. Stores path to 'gcc' in $GPP
#
CheckGpp()
{
    echo -n "Checking for g++:    "
    if [ -z "$GPP" ]; then
	GPP=`which g++ 2>/dev/null`
    fi
    if [ ! -x "$GPP" ]; then
	echo "not found!"
        TOOLS="missing"
    else
        version=`g++ -dumpversion`
        echo "$GPP [$version]"
    fi
}

# Checks for make. Honours $MAKE if set. Stores path to 'make' in $MAKE
#
CheckMake()
{
    echo -n "Checking for make:   "
    if [ -z "$MAKE" ]; then
	MAKE=`which make 2>/dev/null`
    fi
    if [ ! -x "$MAKE" ]; then
	echo "not found!"
        TOOLS="missing"
    else
        version=`make --version | head -n 1 | cut -d' ' -f3`
        echo "$MAKE [$version]"
    fi
}




# Generates a Makefile. Requires that $SCONS is set.
#
MakeMakefile()
{
	cat > Makefile << EOF
all:
ifeq ("\${ARCH}","")
	@$SCONS build
else
	@$SCONS build ARCH=\${ARCH}
endif

# it is also possible to use
# @$SCONS -j4

install:
	@$SCONS install

clean:
	@$SCONS -c

uninstall:
	@$SCONS -c install

doc:
	@$SCONS doc

test:
	@$SCONS test

dist:
	@$SCONS dist-tgz

dist-tgz:
	@$SCONS dist-tgz

dist-bz2:
	@$SCONS dist-bz2

dist-zip:
	@$SCONS dist-zip

dist-deb:
ifeq ("\${ARCH}","")
	@$SCONS dist-deb
else
	@$SCONS dist-deb ARCH=\${ARCH}
endif

dist-rpm:
	@$SCONS dist-rpm

distclean:
	@$SCONS -c
	@$SCONS distclean

EOF
}

echo "-------------------------------------------------------------"
echo -e $BOLD"DANA core"$NORMAL
echo "Distributed Asynchronous Numerical Adaptive Computing Library"
echo "Copyright 2006,2007 (c) Nicolas P. Rougier                   "
echo "-------------------------------------------------------------"
echo 
echo "Configuration stage 1 (tools)"
echo "-----------------------------"
TOOLS="ok"
CheckPython
CheckSCons
CheckGpp
CheckMake
echo
if [ "$TOOLS" = "missing" ]; then
    echo
    echo "Some tools are missing."
    echo "Please consider installing them before configuring again"
    exit 1
fi

rm -rf .cache >& /dev/null
mkdir .cache >& /dev/null
PYTHON=`python -c "import sys; print 'python%s' % sys.version[:3]"`
echo "PREFIX = '$PREFIX'" > .cache/config
echo "PYTHON = '$PYTHON'" >> .cache/config


echo "Configuration stage 2 (libraries)"
echo "---------------------------------"
$SCONS configure $#
# Does configure went ok ?
if [ "$?" -ne "0" ]; then
    echo
    echo "Some libraries are missing."
    echo "Please consider installing them before configuring again"
    exit 1
fi
echo
echo "Final configuration"
echo "-------------------"
echo "Library directory: "$PREFIX"/lib"
echo "Python directory:  "$PREFIX"/lib/"$PYTHON"/site-packages"
echo "Include directory: "$PREFIX"/include"
echo -e $BLUE
echo "Make sure the library directory is accessible from your LD_LIBRARY_PATH"
echo "Make sure the python directory is accessible from your PYTHONPATH"
echo -e $NORMAL


MakeMakefile

echo -n "Proceed with building and installation [yes/no] ? (yes) "
read ANSWER

if [ "$ANSWER" = "" ] || [ "$ANSWER" = "yes" ]; then
    make install
    exit 0
else
    echo "Type 'make; make install' later to build and install DANA"
    echo
    exit 0
fi