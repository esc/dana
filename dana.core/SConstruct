#! /usr/bin/env python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import glob
import os, os.path
import distutils.sysconfig
from tools.configure import configure
from tools.module import make_module
from tools.dist import make_dist_zip, make_dist_bz2, make_dist_tgz

# _________________________________________________________________________setup

PACKAGE_NAME    = 'dana.core'
PACKAGE_VERSION = '1.0'
SRCDIR          = 'dana'
AUTHOR          = 'Nicolas P. Rougier'
COPYRIGHT       = 'Copyright 2006,2007 Nicolas P. Rougier'
DESCRIPTION     = 'Distributed Asynchronous Numerical Adaptive computations\n'\
                  'Core package'
PLATFORM        = sys.platform
CACHEDIR        = './.cache'

CONFIG_FILENAME = os.path.join (CACHEDIR, 'config')


# _____________________________________________________________environment setup

# Read configuration file
options = Options (CONFIG_FILENAME)
for o in ['PREFIX', 'LIBDIR', 'INCLUDEDIR', 'PYTHONDIR', 'CPPPATH', 'LIBS']:
    options.Add (o)

# Create environment
env = Environment (CACHEDIR=CACHEDIR, options = options)

# Tell scons to put signatures within CACHEDIR
SConsignFile ('%s/scons-signatures' % env['CACHEDIR'])

#_Check configure stage 
if not os.path.exists (CONFIG_FILENAME):
    print CONFIG_FILENAME
    print "Please run './configure' before going any further"
    sys.exit (0)

conf = Configure (env, conf_dir=env['CACHEDIR'],
                  log_file=env['CACHEDIR']+'/config.log')
env.BuildDir ('%s/%s' % (env['CACHEDIR'], SRCDIR) , SRCDIR)

# _____________________________________________________________________verbosity
class filtered_output:
    def write (self, s):
        """ Suppress all 'scons: ' output """
        if s[:7] != 'scons: ':
            sys.__stdout__.write (s)
#sys.stdout = filtered_output()
#sys.stderr = filtered_output()


# _____________________________________________________________________configure
if 'configure' in COMMAND_LINE_TARGETS:
    Alias ('configure', None)
    configure (env, conf, options, CONFIG_FILENAME)
    sys.exit(0)

# ___________________________________________________________________________doc
elif 'doc' in COMMAND_LINE_TARGETS:
    pass

# __________________________________________________________________________test
elif 'test' in COMMAND_LINE_TARGETS:
    env.Alias ('test', None)

# ______________________________________________________________________dist-zip
elif 'dist-zip' in COMMAND_LINE_TARGETS:
    make_dist_zip (env, '%s-%s' % (PACKAGE_NAME, PACKAGE_VERSION))

# ______________________________________________________________________dist-tgz
elif 'dist-tgz' in COMMAND_LINE_TARGETS:
    make_dist_tgz (env, '%s-%s' % (PACKAGE_NAME, PACKAGE_VERSION))

# ______________________________________________________________________dist-bz2
elif 'dist-bz2' in COMMAND_LINE_TARGETS:
    make_dist_bz2 (env, '%s-%s' % (PACKAGE_NAME, PACKAGE_VERSION))

# ___________________________________________________________________package-rpm
elif 'package-rpm' in COMMAND_LINE_TARGETS:
    env.Alias('package-rpm', None)

# ___________________________________________________________________package-deb
elif 'package-deb' in COMMAND_LINE_TARGETS:
    env.Alias('package-deb', None)

# ___________________________________________________________________________all
else:
    make_module (env, conf, 'dana')
    make_module (env, conf, 'dana/core')
    make_module (env, conf, 'dana/tests')
    make_module (env, conf, 'dana/projection/profile',  ['dana_core'])
    make_module (env, conf, 'dana/projection/distance', ['dana_core'])
    make_module (env, conf, 'dana/projection/shape',    ['dana_core'])
    make_module (env, conf, 'dana/projection/density',  ['dana_core'])
    make_module (env, conf, 'dana/projection',  ['dana_core',
                                                 'dana_projection_shape',
                                                 'dana_projection_density',
                                                 'dana_projection_profile',
                                                 'dana_projection_distance'])



