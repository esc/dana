#! /usr/bin/env python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import glob
import os, os.path
from tools.configure import configure
from tools.extension import Extension
from tools.archive import archive_builder, Files
from tools.package import package_builder

# _________________________________________________________________________setup
PACKAGE_NAME    = 'dana.core'
version = os.popen('svnversion .').read()[:-1]
version = version.split(':')[-1]
PACKAGE_VERSION = 'svn%s' % version 
PACKAGE_FULLNAME= '%s-%s' % (PACKAGE_NAME, PACKAGE_VERSION)
PACKAGE_DEPS = 'libboost-python-dev, python2.5-dev, libxml2-dev'
PACKAGE_DESC = """Distributed Aysnchronous Numerical Adaptive computational library
 DANA is a multi-platform C++/Python library for distributed asynchronous
 numerical and adaptive computation. The computational paradigm supporting
 the library is grounded on the notion of a unit that is essentially a potential
 that can vary along time under the influence of other units and learning.
"""
ARCHIVE_INCLUDE = ['*']
ARCHIVE_EXCLUDE = ['.*', '*.os', '*.pyc', '*.o', '*~',
                   '*.pdf', '*.ps', '*.so', '*.a',
                   '*.zip', '*.tgz', '*.gz', '*.bz2',
                   'manual', '.cache', 'dist', '.libs']

# _____________________________________________________________environment setup
CACHEDIR        = './.cache'
CONFIG_FILENAME = os.path.join (CACHEDIR, 'config')
if not os.path.exists (CONFIG_FILENAME):
    print CONFIG_FILENAME
    print "Please run './configure' before going any further"
    sys.exit (0)
options = Options (CONFIG_FILENAME)
for o in ['CPPPATH','LIBS','PREFIX','LIBDIR','INCLUDEDIR','PYTHONDIR','ARCH']:
    options.Add (o)
env = Environment (CACHEDIR=CACHEDIR, options = options)
options.Add ('ARCH', '', os.uname()[-1])
options.Update(env)
env["BUILDDIR"] = './.build/%s' % env['ARCH']
env.BuildDir (env["BUILDDIR"], '.', duplicate=0)
env.Append (BUILDERS = {'Archive'  : archive_builder})
env.Append (BUILDERS = {'Package'  : package_builder})
SConsignFile ('%s/scons-signatures' % env['CACHEDIR'])
conf = Configure (env, conf_dir=env['CACHEDIR'],
                  log_file=env['CACHEDIR']+'/config.log')
conf.env.Append (CCFLAGS = '-march=%s' % env['ARCH'])
Default ()

if 'configure' in COMMAND_LINE_TARGETS:
    Alias ('configure', None)
    configure (env, conf, options, CONFIG_FILENAME)
    sys.exit(0)

# ____________________________________________________________________Extensions
extensions = [
    Extension (env, 'dana'),
    Extension (env, 'dana/core'),
    Extension (env, 'dana/tests'),
    Extension (env, 'dana/projection/profile', ['dana_core']),
    Extension (env, 'dana/projection/density', ['dana_core']),
    Extension (env, 'dana/projection/shape', ['dana_core']),
    Extension (env, 'dana/projection/distance', ['dana_core']),
    Extension (env, 'dana/projection', ['dana_core',
                                        'dana_projection_density',
                                        'dana_projection_shape',
                                        'dana_projection_profile',
                                        'dana_projection_distance'])
]

# _______________________________________________________________________Targets
if 'dist-bz2' in COMMAND_LINE_TARGETS:
    files = Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE)
    env.Alias ('dist-bz2', env.Archive ('%s.bz2' % PACKAGE_FULLNAME, files))

elif 'dist-tgz' in COMMAND_LINE_TARGETS:
    files = Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE)
    env.Alias ('dist-tgz', env.Archive ('%s.tgz' % PACKAGE_FULLNAME, files))

elif 'dist-zip' in COMMAND_LINE_TARGETS:
    files = Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE)
    env.Alias ('dist-zip', env.Archive ('%s.zip' % PACKAGE_FULLNAME, files))

elif 'dist-deb' in COMMAND_LINE_TARGETS:
    modules = []
    files = []
    for ext in extensions:
        if ext[1]:
            for m in ext[1]: modules.append (m)
        for f in ext[0]: files.append (f)
    sources = [f[1] for f in files]
    pkg = env.Package('%s-%s.deb' % (PACKAGE_FULLNAME, env['ARCH']), sources,
                      PKG_FILES = files,
                      PKG_PREFIX = 'usr',
                      PKG_INFO = {'Package': PACKAGE_NAME,
                                  'Priority': 'extra',
                                  'Section': 'misc',
                                  'Maintainer': 'Nicolas P. Rougier',
                                  'Architecture': env['ARCH'],
                                  'Version': PACKAGE_VERSION,
                                  'Depends': PACKAGE_DEPS,
                                  'Description': PACKAGE_DESC})
    for m in modules:
        env.Depends (pkg, m)
    env.Alias('dist-deb', pkg)
