#! /usr/bin/env python
#------------------------------------------------------------------------------
# DANA -- Distributed Asynchronous Numerical Adaptive computing library
# Copyright (C) 2006,2007,2008  Nicolas P. Rougier
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------------
import os, sys
import numpy
import distutils.sysconfig
from tools import *


name        = 'dana.core'
version     = 'beta'
fullname    = '%s-%s' % (name, version)

description = \
    "Distributed Aysnchronous Numerical Adaptive computational library"        \
    "DANA is a multi-platform C++/Python library for distributed asynchronous" \
    "numerical and adaptive computation. The computational paradigm supporting"\
    "the library is grounded on the notion of a unit that is essentially a"    \
    "potential that can vary along time under the influence of other units and"\
    "learning."

exts = [['dana',                     []],
        ['dana/core',                []],
        ['dana/tests',               []],
        ['dana/projection/profile',  ['dana_core']],
        ['dana/projection/density',  ['dana_core']],
        ['dana/projection/shape',    ['dana_core']],
        ['dana/projection/distance', ['dana_core']],
        ['dana/projection',          ['dana_core',
                                      'dana_projection_density',
                                      'dana_projection_shape',
                                      'dana_projection_profile',
                                      'dana_projection_distance']]]

python_version = '%d.%d' % (sys.version_info[0], sys.version_info[1])
libraries = [ ('python2.5', 'Python.h', 'c++'),
              ('xml2', 'libxml/xmlwriter.h', 'c++'),
              ('boost_python',  'boost/python.hpp', 'c++') ]

#------------------------------------------------------------------------------
opts = Options ('custom.py')
env  = Environment (options = opts)
opts.Add ('PREFIX', 
          'installation prefix for architecture-independent files',
          os.getenv('LOCAL', '/usr'))
opts.Add ('LIBDIR', 
          'installation directory for object code libraries',
          "${PREFIX}/lib")
opts.Add ('INCLUDEDIR',
          'installation directory for C/C++ header files',
          "${PREFIX}/include")
opts.Add ('PYTHONDIR',
          'installation directory for python files',
          "%s/python%d.%d/site-packages" % ("${LIBDIR}",
                                            sys.version_info[0],
                                            sys.version_info[1]))
opts.Add ('CPPPATH',
          'compiler include path',
          os.getenv('CPPPATH', '').split(':'))
opts.Add ('LIBPATH',
          'linker library path',
          os.getenv('LIBPATH', '').split(':'))
opts.Add ('CPPFLAGS',
          'C/C++/Objective C preprocessor flags',
          os.getenv('CPPFLAGS', ''))
opts.Add ('CFLAGS',
          'C compiler flags',
          os.getenv('CFLAGS', '-O3 -Wall'))
opts.Add ('CXXFLAGS',
          'C++ compiler flags',
          os.getenv('CXXFLAGS', '-O3 -Wall'))
opts.Add ('LIBS',
          'linker libraries',
          '')

opts.Update (env)
opts.Save ('custom.py', env)
Help (opts.GenerateHelpText (env))

# ______________________________________________________________________________
conf = Configure(env)
conf.env.Append (CPPPATH = [distutils.sysconfig.get_python_inc()])
conf.env.Append (CPPPATH = [numpy.get_include()])
conf.env.Append (CPPPATH = ["%s/include" % os.getenv('HOME')])
conf.env.Append (LIBPATH = ["%s/lib" % os.getenv('HOME')])
conf.env.Append (CPPPATH = ["%s/Include" % os.getenv('HOME')])
conf.env.Append (LIBPATH = ["%s/Library" % os.getenv('HOME')])
conf.env.Append (CPPPATH = ["%s/include" % env['PREFIX']])
conf.env.Append (LIBPATH = ["%s/lib" % env['PREFIX']])

# ______________________________________________________________________________
if 'info' in COMMAND_LINE_TARGETS:
    Alias ('info', None)
    print
    print '--------------------------------------------------------------------'
    print ' Building environment'
    print
    print '  CC:         %s' % env['CC']
    print '  CXX:        %s' % env['CXX']
    print '  CFLAGS:     %s' % env['CFLAGS']
    print '  CXXFLAGS:   %s' % env['CXXFLAGS']
    print '  CPPPATH:    %s' % env['CPPPATH']
    print '  LIBPATH:    %s' % env['LIBPATH']
    print '  LIBS:       %s' % [x[0] for x in libraries]
    print '  PREFIX:     %s' % env['PREFIX']
    print '  LIBDIR:     %s' % env['LIBDIR']
    print '  INCLUDEDIR: %s' % env['INCLUDEDIR']
    print '  PYTHONDIR:  %s' % env['PYTHONDIR']
    print '--------------------------------------------------------------------'
    print
    sys.exit (0)

#------------------------------------------------------------------------------
for library, header, language in libraries:
    conf.CheckLibWithHeader (library, header, language)
env = conf.Finish()
env.Append (BUILDERS = {'Archive'  : archive_builder})
env.Append (BUILDERS = {'Package'  : package_builder})
env["ARCH"] = os.uname()[-1]
env["BUILDDIR"] = '.build/%s'% env["ARCH"]
env.BuildDir (env["BUILDDIR"], '.', duplicate=0)



#------------------------------------------------------------------------------
ext_files = []
ext_modules = []
for ext in exts:
    f, m = Extension (env, ext[0], ext[1])
    ext_files.extend (f)
    if m:
        ext_modules.extend (m)
        Default (m)

#------------------------------------------------------------------------------
archive_include = ['*']
archive_exclude = ['.*', '*.os', '*.pyc', '*.o', '*~',
                   '*.pdf', '*.ps', '*.so', '*.a',
                   '*.zip', '*.tgz', '*.gz', '*.bz2',
                   'manual', '.cache', 'dist', '.libs']
archive_files = Files ('.', archive_include, archive_exclude)
env.Alias ('dist-bz2', env.Archive ('%s.bz2' % fullname, archive_files))
env.Alias ('dist-tgz', env.Archive ('%s.tgz' % fullname, archive_files))
env.Alias ('dist',     env.Archive ('%s.tgz' % fullname, archive_files))
env.Alias ('dist-zip', env.Archive ('%s.zip' % fullname, archive_files))

#------------------------------------------------------------------------------
pkg = env.Package(
    '%s_%s.deb' % (fullname, env['ARCH']), ext_modules,
    PKG_FILES = ext_files,
    PKG_PREFIX = 'usr',
    PKG_INFO = {'Package': name,
                'Priority': 'extra',
                'Section': 'misc',
                'Maintainer': 'Nicolas P. Rougier',
                'Architecture': env['ARCH'],
                'Version': version,
                'Depends': 'libboost-python-dev, python2.5-dev, libxml2-dev',
                'Description': description}
    )
for module in ext_modules:
    env.Depends (pkg, module)
env.Alias('dist-deb', pkg)
