#! /usr/bin/env python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import glob
import os, os.path
import distutils.sysconfig
from tools.configure import configure
from tools.module import Modules, Module
from tools.archive import archive_builder, Files
from tools.package import package_builder
from tools.extension import extension_builder

# _________________________________________________________________________setup
PACKAGE_NAME    = 'dana.core'
PACKAGE_VERSION = '1.0'
PACKAGE_FULLNAME= '%s-%s' % (PACKAGE_NAME, PACKAGE_VERSION)
AUTHOR          = 'Nicolas P. Rougier'
MAINTAINER      = 'Nicolas P. Rougier'
COPYRIGHT       = 'Copyright 2006,2007 Nicolas P. Rougier'
DESCRIPTION     = 'Distributed Asynchronous Numerical Adaptive computations, '\
                  'Core package'
DEPENDENCIES    = 'libboost_python, libxml-2.0, python2.5'
ARCHIVE_INCLUDE = ['*']
ARCHIVE_EXCLUDE = ['.*', '*.os', '*.pyc', '*.o', '*~',
                   '*.pdf', '*.ps', '*.so', '*.a',
                   '*.zip', '*.tgz', '*.gz', '*.bz2',
                   'manual', '.cache', 'dist', '.libs']

MODULES = [ ['dana', []],
            ['dana/core', []],
            ['dana/tests', []],
            ['dana/projection/profile',  ['dana_core']],
            ['dana/projection/distance', ['dana_core']],
            ['dana/projection/shape',    ['dana_core']],
            ['dana/projection/density',  ['dana_core']],
            ['dana/projection', ['dana_core',
                                 'dana_projection_shape',
                                 'dana_projection_density',
                                 'dana_projection_profile',
                                 'dana_projection_distance']] ]

# _____________________________________________________________environment setup

CACHEDIR        = './.cache'
CONFIG_FILENAME = os.path.join (CACHEDIR, 'config')
options = Options (CONFIG_FILENAME)
for o in ['CPPPATH', 'LIBS',
          'PREFIX', 'LIBDIR', 'INCLUDEDIR', 'PYTHONDIR',
          'ARCH']:
    options.Add (o)

# Create environment
env = Environment (CACHEDIR=CACHEDIR, options = options,
                   PACKAGE_NAME = PACKAGE_NAME,
                   PACKAGE_VERSION = PACKAGE_VERSION,
                   PACKAGE_FULLNAME = PACKAGE_FULLNAME,
                   AUTHOR = AUTHOR,
                   MAINTAINER = MAINTAINER,
                   COPYRIGHT = COPYRIGHT,
                   DESCRIPTION = DESCRIPTION,
                   DEPENDENCIES = DEPENDENCIES)

# Setup default arch
options.Add ('ARCH', '', os.uname()[-1])
options.Update(env)

# Setup BUILDIR and LIBDIR for specific arch
env["BUILDDIR"] = './.build/%s' % env['ARCH']
env["BUILDLIBDIR"] = '%s/.libs' % env['BUILDDIR']
env.BuildDir (env["BUILDDIR"], '.', duplicate=1)

# Tell scons to put signatures within CACHEDIR
SConsignFile ('%s/scons-signatures' % env['CACHEDIR'])

#_Check configure stage 
if not os.path.exists (CONFIG_FILENAME):
    print CONFIG_FILENAME
    print "Please run './configure' before going any further"
    sys.exit (0)

conf = Configure (env, conf_dir=env['CACHEDIR'],
                  log_file=env['CACHEDIR']+'/config.log')

env.Append (BUILDERS = {'Archive'  : archive_builder})
env.Append (BUILDERS = {'Package'  : package_builder})
env.Append (BUILDERS = {'Extension': extension_builder})


# _____________________________________________________________________verbosity
class filtered_output:
    def write (self, s):
        """ Suppress all 'scons: ' output """
        if s[:7] != 'scons: ':
            sys.__stdout__.write (s)
#sys.stdout = filtered_output()
#sys.stderr = filtered_output()


# _____________________________________________________________________configure
if 'configure' in COMMAND_LINE_TARGETS:
    Alias ('configure', None)
    configure (env, conf, options, CONFIG_FILENAME)
    sys.exit(0)

# ___________________________________________________________________________doc
elif 'doc' in COMMAND_LINE_TARGETS:
    pass

# __________________________________________________________________________test
elif 'test' in COMMAND_LINE_TARGETS:
    env.Alias ('test', None)

# ______________________________________________________________________dist-zip
elif 'dist-zip' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('%s.zip' % PACKAGE_FULLNAME,
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE))
    env.Alias ('dist-zip', archive)

# ______________________________________________________________________dist-tgz
elif 'dist-tgz' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('%s.tgz' % PACKAGE_FULLNAME,
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE))
    env.Alias ('dist-tgz', archive)

# ______________________________________________________________________dist-bz2
elif 'dist-bz2' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('%s.bz2' % PACKAGE_FULLNAME,
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE))
    env.Alias ('dist-bz2', archive)


# _______________________________________________________________________modules
modules, installs = Modules (env, MODULES)

# ______________________________________________________________________dist-rpm
if 'dist-rpm' in COMMAND_LINE_TARGETS:
    env.Alias('dist-rpm', None)

# ______________________________________________________________________dist-deb
if 'dist-deb' in COMMAND_LINE_TARGETS:

    files = []
    for i in installs:
        for s in i.sources:
            files.append (str(s))

    env["INSTALLS"] = installs
    package = env.Package ('%s-%s.deb' % (PACKAGE_FULLNAME, env["ARCH"]),
                           files, ARCHIVE_TYPE = 'deb')
    env.Alias('dist-deb', package)

# ___________________________________________________________________________all
elif 'build' in COMMAND_LINE_TARGETS:
    env.Alias ('build', modules)


files = Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE)
if 'dist-bz2' in COMMAND_LINE_TARGETS:
    env.Alias ('dist-bz2', env.Archive ('%s.bz2' % PACKAGE_FULLNAME, files))
elif 'dist-tgz' in COMMAND_LINE_TARGETS:
    env.Alias ('dist-tgz', env.Archive ('%s.tgz' % PACKAGE_FULLNAME, files))
elif 'dist-zip' in COMMAND_LINE_TARGETS:
    env.Alias ('dist-zip', env.Archive ('%s.zip' % PACKAGE_FULLNAME, files))



# ____________________________________________________________________Extensions
def ExtensionSource (path):
    return glob.glob (os.path.join (path, '*.cc'))

def ExtensionTarget (path):
    return '%s/%s' % (env["BUILDDIR"], path.replace ('/', '_'))

def ExtensionBuild (path, libs=[]):
    return env.Extension (ExtensionTarget(path), ExtensionSource(path),
                   LIBS = env["LIBS"] + libs)

def ExtensionInstall (extension_path):
    p = env.Install (os.path.join (env["PYTHONDIR"], extension_path),
                     glob.glob (os.path.join(extension_path, '*.py')))
    h = env.Install (os.path.join (env["INCLUDEDIR"], extension_path),
                     glob.glob (os.path.join(extension_path, '*.h')))
    env.Alias ('install', p+h)
    return p + h

    
#ExtensionBuild ('dana/core')
#ExtensionInstall ('dana/core')

#env.Extension (ExtensionTarget('dana/projection/profile'),
#               ExtensionSource('dana/projection/profile'),
#               LIBS = env["LIBS"] + ['dana_core'])

#env.Extension (ExtensionTarget('dana/projection/density'),
#               ExtensionSource('dana/projection/density'),
#               LIBS = env["LIBS"] + ['dana_core'])

#env.Extension (ExtensionTarget('dana/projection/shape'),
#               ExtensionSource('dana/projection/shape'),
#               LIBS = env["LIBS"] + ['dana_core'])

#env.Extension (ExtensionTarget('dana/projection/distance'),
#               ExtensionSource('dana/projection/distance'),
#               LIBS = env["LIBS"] + ['dana_core'])

#env.Extension (ExtensionTarget ('dana/projection'),
#               ExtensionSource ('dana/projection'),
#               LIBS = env["LIBS"] + ['dana_core',
#                                     'dana_projection_density',
#                                     'dana_projection_shape',
#                                     'dana_projection_profile',
#                                     'dana_projection_distance'])
