#! /usr/bin/env python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import glob
import os, os.path
import distutils.sysconfig
from tools.configure import configure
from tools.module import Module
from tools.archive import archive_builder, Files
from tools.package import package_builder

# _________________________________________________________________________setup
PACKAGE_NAME    = 'dana.core'
PACKAGE_VERSION = '1.0'
AUTHOR          = 'Nicolas P. Rougier'
COPYRIGHT       = 'Copyright 2006,2007 Nicolas P. Rougier'
DESCRIPTION     = 'Distributed Asynchronous Numerical Adaptive computations\n'\
                  'Core package'
CACHEDIR        = './.cache'
CONFIG_FILENAME = os.path.join (CACHEDIR, 'config')
ARCHIVE_INCLUDE = ['*']
ARCHIVE_EXCLUDE = ['.*', '*.os', '*.pyc', '*.o', '*~',
                   '*.pdf', '*.ps', '*.so', '*.a',
                   '*.zip', '*.tgz', '*.gz', '*.bz2',
                   'manual', '.cache', 'dist', '.libs']

# _____________________________________________________________environment setup

# Read configuration file
options = Options (CONFIG_FILENAME)
for o in ['CPPPATH', 'LIBS', 'LIBDIR', 'PREFIX', 'PYTHON', 'ARCH']:
    options.Add (o)

# Create environment
env = Environment (CACHEDIR=CACHEDIR, options = options)

# Setup default arch
options.Add ('ARCH', '', os.uname()[-1])
options.Update(env)

# Setup BUILDIR and LIBDIR for specific arch
env["BUILDDIR"] = './.build/%s' % env['ARCH']
env["LIBDIR"] = './.libs/%s' % env['ARCH']

# Tell scons to put signatures within CACHEDIR
SConsignFile ('%s/scons-signatures' % env['CACHEDIR'])

#_Check configure stage 
if not os.path.exists (CONFIG_FILENAME):
    print CONFIG_FILENAME
    print "Please run './configure' before going any further"
    sys.exit (0)

conf = Configure (env, conf_dir=env['CACHEDIR'],
                  log_file=env['CACHEDIR']+'/config.log')

env.Append (BUILDERS = {'Archive' : archive_builder})
env.Append (BUILDERS = {'Package' : package_builder})

# _____________________________________________________________________verbosity
class filtered_output:
    def write (self, s):
        """ Suppress all 'scons: ' output """
        if s[:7] != 'scons: ':
            sys.__stdout__.write (s)
#sys.stdout = filtered_output()
#sys.stderr = filtered_output()


# _____________________________________________________________________configure
if 'configure' in COMMAND_LINE_TARGETS:
    Alias ('configure', None)
    configure (env, conf, options, CONFIG_FILENAME)
    sys.exit(0)

# ___________________________________________________________________________doc
elif 'doc' in COMMAND_LINE_TARGETS:
    pass

# __________________________________________________________________________test
elif 'test' in COMMAND_LINE_TARGETS:
    env.Alias ('test', None)

# ______________________________________________________________________dist-zip
elif 'dist-zip' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('dana.core',
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE),
                           ARCHIVE_TYPE = 'zip')
    env.Alias ('dist-zip', archive)

# ______________________________________________________________________dist-tgz
elif 'dist-tgz' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('dana.core',
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE),
                           ARCHIVE_TYPE = 'tgz')
    env.Alias ('dist-tgz', archive)

# ______________________________________________________________________dist-bz2
elif 'dist-bz2' in COMMAND_LINE_TARGETS:
    archive = env.Archive ('dana.core',
                           Files ('.', ARCHIVE_INCLUDE, ARCHIVE_EXCLUDE),
                           ARCHIVE_TYPE = 'bz2')
    env.Alias ('dist-bz2', archive)


# _______________________________________________________________________modules
modules = []
modules.append (Module (env, 'dana'))
modules.append (Module (env, 'dana/core'))
modules.append (Module (env, 'dana/tests'))
modules.append (Module (env, 'dana/projection/profile',  ['dana_core']))
modules.append (Module (env, 'dana/projection/distance', ['dana_core']))
modules.append (Module (env, 'dana/projection/shape',    ['dana_core']))
modules.append (Module (env, 'dana/projection/density',  ['dana_core']))
modules.append (Module (env, 'dana/projection',  ['dana_core',
                                        'dana_projection_shape',
                                        'dana_projection_density',
                                        'dana_projection_profile',
                                        'dana_projection_distance']))

# ______________________________________________________________________dist-rpm
if 'dist-rpm' in COMMAND_LINE_TARGETS:
    env.Alias('dist-rpm', None)

# ______________________________________________________________________dist-deb
if 'dist-deb' in COMMAND_LINE_TARGETS:
    package = env.Package ('dana.core',
                           'Makefile',
                           PACKAGE_TYPE = 'deb')
    for module in modules:
        env.Depends (package, module)
    env.Alias ('dist-deb', package)

    print help(env.Install)

# ___________________________________________________________________________all
elif 'build' in COMMAND_LINE_TARGETS:
    env.Alias ('build', modules)
