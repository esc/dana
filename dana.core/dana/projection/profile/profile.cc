//
// Copyright (C) 2006 Nicolas Rougier
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of the
// License, or (at your option) any later version.

#include "profile.h"

using namespace dana::projection;
using namespace dana::projection::profile;


// =============================================================================
//
// =============================================================================
Profile::Profile (void)
{}

// =============================================================================
//
// =============================================================================
Profile::~Profile (void)
{}

// =============================================================================
//
// =============================================================================
float
Profile::call (float distance)
{
    return 0.0f;
}

// =============================================================================
//
// =============================================================================
Constant::Constant (float v) : Profile()
{
    value = v;
}

// =============================================================================
//
// =============================================================================
float
Constant::call (float distance)
{
    return value;
}

// =============================================================================
//
// =============================================================================
Linear::Linear (float min, float max) : Profile()
{
    minimum = min;
    maximum = max;
}

// =============================================================================
//
// =============================================================================
float
Linear::call (float distance)
{
    return minimum + (maximum - minimum)*(1.0f-distance);
}

// =============================================================================
//
// =============================================================================
Uniform::Uniform (float min, float max) : Profile()
{
    minimum = min;
    maximum = max;
}

// =============================================================================
//
// =============================================================================
float
Uniform::call (float distance)
{
    return minimum + (maximum - minimum)*drand48();
}

// =============================================================================
//
// =============================================================================
Gaussian::Gaussian (float s, float m) : Profile()
{
    scale = s;
    mean = m * m;
}

// =============================================================================
//
// =============================================================================
float
Gaussian::call (float distance)
{
    return scale * exp (-(distance*distance)/ mean);
}

// =============================================================================
//
// =============================================================================
DoG::DoG (float s1, float m1, float s2, float m2) : Profile()
{
    scale_1 = s1;
    mean_1  = m1 * m1;
    scale_2 = s2;
    mean_2  = m2 * m2;    
}

// =============================================================================
//
// =============================================================================
float
DoG::call (float distance)
{
    float d = distance*distance;
    return scale_1 * exp (-d/mean_1) - scale_2 * exp (-d/mean_2);
}

