//
// Copyright (C) 2006 Nicolas Rougier
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of the
// License, or (at your option) any later version.

#include <cstdlib>
#include "density.h"

using namespace dana::projection;
using namespace dana::projection::density;


// =============================================================================
//
// =============================================================================
Density::Density (float d) : density(d)
{}

// =============================================================================
//
// =============================================================================
Density::~Density (void)
{}

// =============================================================================
//
// =============================================================================
bool
Density::call (float distance)
{
    return false;
}

// =============================================================================
//
// =============================================================================
Full::Full (float d) : Density (d)
{}

// =============================================================================
//
// =============================================================================
bool
Full::call (float distance)
{
    return true;
}

// =============================================================================
//
// =============================================================================
Sparse::Sparse (float d) : Density (d)
{}

// =============================================================================
//
// =============================================================================
bool
Sparse::call (float distance)
{
    return drand48() < density;
}

// =============================================================================
//
// =============================================================================
Sparser::Sparser (float d) : Density (d)
{
    if (density == 0)
        density = 1.0f;
}

// =============================================================================
//
// =============================================================================
bool
Sparser::call (float distance)
{
    return drand48() > distance/density;
}
